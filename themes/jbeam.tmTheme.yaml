# VS theme settings for TypeScript

---
name: Jbeam

settings:
- scope: storage.modifier, storage.type, keyword.other, keyword.operator.expression, keyword.operator.new, keyword.generator.asterisk, punctuation.definition.template-expression
  settings: { vsclassificationtype: keyword }

- scope: constant.language, variable.language
  settings: { vsclassificationtype: keyword }

- scope: keyword.control, keyword.operator.expression.delete, keyword.other.using, keyword.other.operator, entity.name.operator
  settings: { vsclassificationtype: keyword - control }

- scope: support.type, entity.name.type, entity.name.namespace, entity.other.attribute, entity.name.scope-resolution, entity.name.class
  settings: { vsclassificationtype: type }

- scope: string, punctuation.definition.string, constant.character
  settings: { vsclassificationtype: string }

- scope: constant.numeric, meta.delimiter.decimal.period.jbeam
  settings: { vsclassificationtype: number }

- scope: keyword.operator, storage.type.function.arrow.jbeam
  settings: { vsclassificationtype: operator }

- scope: meta.brace.angle.jbeam, meta.brace.round.jbeam, meta.brace.square.jbeam, punctuation, meta.delimiter.object.comma.jbeam
  settings: { vsclassificationtype: punctuation }

- scope: comment, comment.block.jbeam, comment.line.double-slash.jbeam, punctuation.definition.comment.jbeam
  settings: { vsclassificationtype: comment }

- scope: entity.name.type.module.jbeam
  settings: { vsclassificationtype: module name }

- scope: meta.array.literal.jbeam
  settings: { vsclassificationtype: identifier }

- scope: meta.object-literal.jbeam
  settings: { vsclassificationtype: identifier }

- scope: meta.template.expression.jbeam, entity.other.inherited-class.jbeam
  settings: { vsclassificationtype: identifier }

- scope: variable, meta.definition.variable.name, support.variable, entity.name.variable, constant.other.placeholder
  settings: { vsclassificationtype: local name }

- scope: entity.name.function, support.function, support.constant.handlebars, source.powershell variable.other.member, entity.name.operator.custom-literal
  settings: { vsclassificationtype: method name }

- scope: variable.language.arguments.jbeam, support.type.object
  settings: { vsclassificationtype: identifier }

- scope: meta.tag string.quoted, meta.tag string.quoted punctuation.definition.string, meta.tag string.quoted
  settings: { vsclassificationtype: string }

- scope: meta.object-literal.key
  settings: { vsclassificationtype: parameter name }

- scope: constant.character.escape
  settings: { vsclassificationtype: string - escape character }

- scope: entity.name.label
  settings: { vsclassificationtype: label name }
...